# Set the minimum version requirements for CMake
cmake_minimum_required(VERSION 3.10)

# Set the name and language of the project
project(Data-Divers-gray-scott-sim LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# Set the output directories for build and executable
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Define the build directory
set(BUILD_DIR ${CMAKE_BINARY_DIR}/build)

# Set the main program source file
set(SOURCES
    gs.cpp
)
# Create main program executable file
add_executable(gs_main ${SOURCES})

# Add a run target to execute the compiled binary
add_custom_target(run
    COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gs_main
    DEPENDS gs_main
    COMMENT "Running the simulation..."
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Clean up all the generated files
add_custom_target(clean-all
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}
    COMMENT "Completely clean the build directory"
)

# Clean up VTK files generated by the simulation
add_custom_target(cleanvtk
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/*.vtk
    COMMENT "Cleaning up VTK output files..."
)

# Platform-specific settings (optional)
if(WIN32)
    add_definitions(-DPLATFORM_WINDOWS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
elseif(APPLE)
    add_definitions(-DPLATFORM_MAC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pthread")
elseif(UNIX)
    add_definitions(-DPLATFORM_LINUX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
endif()

# Set up test files
set(TEST_SOURCES
    tests/test1.cpp
    tests/test2.cpp
    tests/test3.cpp
    tests/test4.cpp
)

# Create test executable file
add_executable(gs_test ${TEST_SOURCES})

# Add Google Test subdirectories
add_subdirectory(googletest)

# Add Header File directory
include_directories(${CMAKE_SOURCE_DIR})

# Link to Google Test Library
target_link_libraries(gs_test gtest gtest_main)

# Set the test target
enable_testing()
add_test(NAME SimulationTest COMMAND gs_test)
