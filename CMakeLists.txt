# Set the minimum version requirements for CMake
cmake_minimum_required(VERSION 3.10)

# Set the name and language of the project
project(Data-Divers-gray-scott-sim LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# Set the output directories for build and executable
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Define the build directory
set(BUILD_DIR ${CMAKE_BINARY_DIR}/build)

# Set the main program source file
set(SOURCES
    gs.cpp
)
# Create main program executable file
add_executable(gs_main ${SOURCES})

# Separate build and run with a custom command
add_custom_target(run
    COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gs_main
    DEPENDS gs_main
    COMMENT "Running the simulation..."
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# Clean up all files generated by the build (complete cleanup)
add_custom_target(full-clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}
    COMMENT "Completely clean the build directory"
)

# Only clean executable files and target files
add_custom_target(clean-bin
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
    COMMENT "Clean only the binary output files"
)

# Only clean up temporary CMake configuration files
add_custom_target(clean-cmake
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/CMakeFiles
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/CMakeCache.txt
    COMMENT "Clean only CMake configuration files"
)

# Only clean up VTK files generated by the simulation
add_custom_target(clean-vtk
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/bin/*.vtk
    COMMENT "Clean only VTK output files"
)

# Platform-specific settings (optional)
if(WIN32)
    add_definitions(-DPLATFORM_WINDOWS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
elseif(APPLE)
    add_definitions(-DPLATFORM_MAC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pthread")
elseif(UNIX)
    add_definitions(-DPLATFORM_LINUX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
endif()

# Add Google Test subdirectories
# add_subdirectory(googletest)
# Automatically download and integrate Google Test using FetchContent
include(FetchContent)
FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/archive/release-1.12.1.zip
)
# Download and make GoogleTest available
FetchContent_MakeAvailable(googletest)

# Add Header File directory
include_directories(${CMAKE_SOURCE_DIR})

# Set the test target
enable_testing()

# Seperate each test to test
add_executable(test1 tests/test1.cpp)
add_executable(test2 gs.cpp tests/test2.cpp)
# add_executable(test3 gs.cpp tests/test3.cpp)
add_executable(test4 tests/test4.cpp)

target_link_libraries(test1 gtest gtest_main)
target_link_libraries(test2 gtest gtest_main)
# target_link_libraries(test3 gtest gtest_main)
target_link_libraries(test4 gtest gtest_main)

add_test(NAME Test1 COMMAND test1)
add_test(NAME Test2 COMMAND test2)
# add_test(NAME Test3 COMMAND test3)
add_test(NAME Test4 COMMAND test4)